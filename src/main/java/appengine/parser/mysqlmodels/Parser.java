/**
 * This class is generated by jOOQ
 */
package appengine.parser.mysqlmodels;


import appengine.parser.mysqlmodels.tables.Coinstatus;
import appengine.parser.mysqlmodels.tables.Cointransfer;
import appengine.parser.mysqlmodels.tables.Fetcher;
import appengine.parser.mysqlmodels.tables.Fromfbpage;
import appengine.parser.mysqlmodels.tables.FromfbpageTofbpage;
import appengine.parser.mysqlmodels.tables.GramUsers;
import appengine.parser.mysqlmodels.tables.Instagramfollowers;
import appengine.parser.mysqlmodels.tables.Instagramfollowersupdate;
import appengine.parser.mysqlmodels.tables.Instagramlastfetch;
import appengine.parser.mysqlmodels.tables.Instagramunfollowersupdate;
import appengine.parser.mysqlmodels.tables.Optimal;
import appengine.parser.mysqlmodels.tables.Optimaljson;
import appengine.parser.mysqlmodels.tables.Optimalnotify;
import appengine.parser.mysqlmodels.tables.Optimalupdate;
import appengine.parser.mysqlmodels.tables.Promotefbpage;
import appengine.parser.mysqlmodels.tables.Sockettradearbitary;
import appengine.parser.mysqlmodels.tables.Swiggyevents;
import appengine.parser.mysqlmodels.tables.Twitterfollowers;
import appengine.parser.mysqlmodels.tables.Ubereats;
import appengine.parser.mysqlmodels.tables.Weareswiggy;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Catalog;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Parser extends SchemaImpl {

    private static final long serialVersionUID = -90440086;

    /**
     * The reference instance of <code>parser</code>
     */
    public static final Parser PARSER = new Parser();

    /**
     * The table <code>parser.coinstatus</code>.
     */
    public final Coinstatus COINSTATUS = appengine.parser.mysqlmodels.tables.Coinstatus.COINSTATUS;

    /**
     * The table <code>parser.cointransfer</code>.
     */
    public final Cointransfer COINTRANSFER = appengine.parser.mysqlmodels.tables.Cointransfer.COINTRANSFER;

    /**
     * The table <code>parser.fetcher</code>.
     */
    public final Fetcher FETCHER = appengine.parser.mysqlmodels.tables.Fetcher.FETCHER;

    /**
     * The table <code>parser.fromfbpage</code>.
     */
    public final Fromfbpage FROMFBPAGE = appengine.parser.mysqlmodels.tables.Fromfbpage.FROMFBPAGE;

    /**
     * The table <code>parser.fromfbpage_tofbpage</code>.
     */
    public final FromfbpageTofbpage FROMFBPAGE_TOFBPAGE = appengine.parser.mysqlmodels.tables.FromfbpageTofbpage.FROMFBPAGE_TOFBPAGE;

    /**
     * The table <code>parser.gram_users</code>.
     */
    public final GramUsers GRAM_USERS = appengine.parser.mysqlmodels.tables.GramUsers.GRAM_USERS;

    /**
     * The table <code>parser.instagramfollowers</code>.
     */
    public final Instagramfollowers INSTAGRAMFOLLOWERS = appengine.parser.mysqlmodels.tables.Instagramfollowers.INSTAGRAMFOLLOWERS;

    /**
     * The table <code>parser.instagramfollowersupdate</code>.
     */
    public final Instagramfollowersupdate INSTAGRAMFOLLOWERSUPDATE = appengine.parser.mysqlmodels.tables.Instagramfollowersupdate.INSTAGRAMFOLLOWERSUPDATE;

    /**
     * The table <code>parser.instagramlastfetch</code>.
     */
    public final Instagramlastfetch INSTAGRAMLASTFETCH = appengine.parser.mysqlmodels.tables.Instagramlastfetch.INSTAGRAMLASTFETCH;

    /**
     * The table <code>parser.instagramunfollowersupdate</code>.
     */
    public final Instagramunfollowersupdate INSTAGRAMUNFOLLOWERSUPDATE = appengine.parser.mysqlmodels.tables.Instagramunfollowersupdate.INSTAGRAMUNFOLLOWERSUPDATE;

    /**
     * The table <code>parser.optimal</code>.
     */
    public final Optimal OPTIMAL = appengine.parser.mysqlmodels.tables.Optimal.OPTIMAL;

    /**
     * The table <code>parser.optimaljson</code>.
     */
    public final Optimaljson OPTIMALJSON = appengine.parser.mysqlmodels.tables.Optimaljson.OPTIMALJSON;

    /**
     * The table <code>parser.optimalnotify</code>.
     */
    public final Optimalnotify OPTIMALNOTIFY = appengine.parser.mysqlmodels.tables.Optimalnotify.OPTIMALNOTIFY;

    /**
     * The table <code>parser.optimalupdate</code>.
     */
    public final Optimalupdate OPTIMALUPDATE = appengine.parser.mysqlmodels.tables.Optimalupdate.OPTIMALUPDATE;

    /**
     * The table <code>parser.promotefbpage</code>.
     */
    public final Promotefbpage PROMOTEFBPAGE = appengine.parser.mysqlmodels.tables.Promotefbpage.PROMOTEFBPAGE;

    /**
     * The table <code>parser.sockettradearbitary</code>.
     */
    public final Sockettradearbitary SOCKETTRADEARBITARY = appengine.parser.mysqlmodels.tables.Sockettradearbitary.SOCKETTRADEARBITARY;

    /**
     * The table <code>parser.swiggyevents</code>.
     */
    public final Swiggyevents SWIGGYEVENTS = appengine.parser.mysqlmodels.tables.Swiggyevents.SWIGGYEVENTS;

    /**
     * The table <code>parser.twitterfollowers</code>.
     */
    public final Twitterfollowers TWITTERFOLLOWERS = appengine.parser.mysqlmodels.tables.Twitterfollowers.TWITTERFOLLOWERS;

    /**
     * The table <code>parser.ubereats</code>.
     */
    public final Ubereats UBEREATS = appengine.parser.mysqlmodels.tables.Ubereats.UBEREATS;

    /**
     * The table <code>parser.weareswiggy</code>.
     */
    public final Weareswiggy WEARESWIGGY = appengine.parser.mysqlmodels.tables.Weareswiggy.WEARESWIGGY;

    /**
     * No further instances allowed
     */
    private Parser() {
        super("parser", null);
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Table<?>> getTables() {
        List result = new ArrayList();
        result.addAll(getTables0());
        return result;
    }

    private final List<Table<?>> getTables0() {
        return Arrays.<Table<?>>asList(
            Coinstatus.COINSTATUS,
            Cointransfer.COINTRANSFER,
            Fetcher.FETCHER,
            Fromfbpage.FROMFBPAGE,
            FromfbpageTofbpage.FROMFBPAGE_TOFBPAGE,
            GramUsers.GRAM_USERS,
            Instagramfollowers.INSTAGRAMFOLLOWERS,
            Instagramfollowersupdate.INSTAGRAMFOLLOWERSUPDATE,
            Instagramlastfetch.INSTAGRAMLASTFETCH,
            Instagramunfollowersupdate.INSTAGRAMUNFOLLOWERSUPDATE,
            Optimal.OPTIMAL,
            Optimaljson.OPTIMALJSON,
            Optimalnotify.OPTIMALNOTIFY,
            Optimalupdate.OPTIMALUPDATE,
            Promotefbpage.PROMOTEFBPAGE,
            Sockettradearbitary.SOCKETTRADEARBITARY,
            Swiggyevents.SWIGGYEVENTS,
            Twitterfollowers.TWITTERFOLLOWERS,
            Ubereats.UBEREATS,
            Weareswiggy.WEARESWIGGY);
    }
}
