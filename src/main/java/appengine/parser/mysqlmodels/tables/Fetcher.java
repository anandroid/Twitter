/**
 * This class is generated by jOOQ
 */
package appengine.parser.mysqlmodels.tables;


import appengine.parser.mysqlmodels.Keys;
import appengine.parser.mysqlmodels.Parser;
import appengine.parser.mysqlmodels.tables.records.FetcherRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Fetcher extends TableImpl<FetcherRecord> {

    private static final long serialVersionUID = -180031797;

    /**
     * The reference instance of <code>parser.fetcher</code>
     */
    public static final Fetcher FETCHER = new Fetcher();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FetcherRecord> getRecordType() {
        return FetcherRecord.class;
    }

    /**
     * The column <code>parser.fetcher.coin</code>.
     */
    public final TableField<FetcherRecord, String> COIN = createField("coin", org.jooq.impl.SQLDataType.VARCHAR.length(10).nullable(false), this, "");

    /**
     * The column <code>parser.fetcher.market</code>.
     */
    public final TableField<FetcherRecord, String> MARKET = createField("market", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false), this, "");

    /**
     * The column <code>parser.fetcher.buy_for</code>.
     */
    public final TableField<FetcherRecord, Double> BUY_FOR = createField("buy_for", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>parser.fetcher.sell_for</code>.
     */
    public final TableField<FetcherRecord, Double> SELL_FOR = createField("sell_for", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>parser.fetcher.volume</code>.
     */
    public final TableField<FetcherRecord, Double> VOLUME = createField("volume", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>parser.fetcher.time</code>.
     */
    public final TableField<FetcherRecord, Timestamp> TIME = createField("time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>parser.fetcher</code> table reference
     */
    public Fetcher() {
        this("fetcher", null);
    }

    /**
     * Create an aliased <code>parser.fetcher</code> table reference
     */
    public Fetcher(String alias) {
        this(alias, FETCHER);
    }

    private Fetcher(String alias, Table<FetcherRecord> aliased) {
        this(alias, aliased, null);
    }

    private Fetcher(String alias, Table<FetcherRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Parser.PARSER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FetcherRecord> getPrimaryKey() {
        return Keys.KEY_FETCHER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FetcherRecord>> getKeys() {
        return Arrays.<UniqueKey<FetcherRecord>>asList(Keys.KEY_FETCHER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Fetcher as(String alias) {
        return new Fetcher(alias, this);
    }

    /**
     * Rename this table
     */
    public Fetcher rename(String name) {
        return new Fetcher(name, null);
    }
}
